#!/usr/bin/env python

import sys
import getopt

import transsys


class RootCell(object) :

  def __init__(self, rootProgram, initialLength) :
    self.state = transsys.TranssysInstance(rootProgram)
    self.state.set_factor_concentration('celllength', initialLength)


  def nextState(self) :
    s = self.state.time_series(2)
    self.state = s[-1]


  def getLength(self) :
    return self.state.get_factor_concentration('celllength')


  def applyTreatment(self, treatmentFactor, treatmentConcentration) :
    self.state.set_factor_concentration(treatmentFactor, treatmentConcentration)


globalTreatmentConcentration = 1.0
treatmentFactorList = []
initialLength = 5.0
nCells = None

def usage() :
  print 'usage:'
  print 'options:'
  print '-t <treatment list>: specify treatments (whitespace separated list)'
  print '-n <number>: specify number of cells to generate'
  print '-l <number>: specify initial length of juvenile root cell'
  print '-h: print this help and exit'


options, args = getopt.getopt(sys.argv[1:], 'n:t:h')
for opt, par in options :
  if opt == '-h' :
    usage()
    sys.exit()
  elif opt == '-t' :
    treatmentFactorList = par.split()
  elif opt == '-n' :
    nCells = int(par)
  else :
    raise StandardError, 'unhandled option "%s"' % opt
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout
if nCells is None :
  raise StandardError, 'number of cells not specified'
parser = transsys.TranssysProgramParser(infile)
rootProgram = parser.parse()
rootCell = RootCell(rootProgram, initialLength)
for treatmentFactor in treatmentFactorList :
  rootCell.applyTreatment(treatmentFactor, globalTreatmentConcentration)
outfile.write('cellNo cellLength\n')
for t in xrange(nCells) :
  outfile.write('%d, %1.17e\n' % (t, rootCell.getLength()))
  rootCell.nextState()
