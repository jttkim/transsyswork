#!/usr/bin/env python

import random
import unittest
import trsysmodis
import transsys
import sys
import os


class TestSequenceFunctions(unittest.TestCase):


  def setUp(self):
    self.transformerfile = open('transformerfile.dat', 'r')
    self.optimiserfile = open('optspec.dat', 'r')
    self.specfile = open('sgx.txt', 'r')
    self.model_01 = open('sgx.tra', 'r')
    self.rndseed = 1
    self.cwd = os.getcwd()
    self.simulated_data = None
    self.simulated_data = open('out_expr.txt', 'r')


  def test_EmpiricalObjectiveFunctionParser(self) :
    self.assertRaises(TypeError, trsysmodis.EmpiricalObjectiveFunctionParser(self.specfile))


  def test_objectivefunctionparser(self) :
    expression_set = trsysmodis.ExpressionSet()
    expression_set.read(self.simulated_data)
    o = trsysmodis.EmpiricalObjectiveFunctionParser(self.specfile)
    objective_function = o.parse_objectivespec()
    objective_function.set_empirical_expression_set(expression_set)
    optimiser = transsys.optim.parse_optimiser(self.optimiserfile)
    optimiser.transformer = transsys.optim.parse_parameter_transformer(self.transformerfile)
    rng = random.Random(self.rndseed)
    optimiser.rng = rng
    optimiser.randomInitRange = 1.0
    transsys_program = transsys.TranssysProgramParser(self.model_01).parse()
    obj = objective_function(transsys_program)
    opt_result = optimiser.optimise(transsys_program, objective_function)


  def test_individual_pythonscripts(self, type = 1) :
    # Generate data: nodes=7, edges=14, noise=0.0
    os.system('python transsysrandomprogram -n test -m 1 -p rtptest.dat')
    os.system('python transsysrandomprogram -n test -m 1 -p rtptest.dat')
    os.system('mv test01.tra test_targettopology.tra')
    os.system('python transsysreparam -T transformerfile.dat -s 1 -p 1 -n test test_targettopology.tra')
    os.system('mv test01.tra test_target.tra')
    if type is None :
      os.system('python transsyswritesimset -s 2 -N 0.0 -e 100 test_target.tra test_target')
    else :
     os.system('python transsyswritesimsetOF -o sgx.txt sgx.tra out')
 

suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)
unittest.TextTestRunner(verbosity=2).run(suite)
