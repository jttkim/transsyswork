#!/usr/bin/env python

import StringIO
import random
import unittest
import sys
import os

import transsys
import trsysmodis


def makeLinearIncreasingEdata(numGenes, numColumns) :
  gene_name_list = map(lambda x: 'g%d' % x, range(numGenes))
  colname_list = map(lambda x: 'a%d' % x, range(numColumns))
  edata = trsysmodis.ExpressionData(gene_name_list)
  x0 = 1.0
  for colname in colname_list :
    x = x0
    d = {}
    for gene_name in gene_name_list :
      d[gene_name] = x
      x = x + 0.1
    edata.add_column(colname, d)
    x0 = x0 + 1.0
  return edata


class TestSequenceFunctions(unittest.TestCase):


  def setUp(self):
    self.transformerspec = """TranssysTypedParameterTransformer
decayTransformation
ArctanFunction
minValue: 0.1
maxValue: 1.0
diffusibilityTransformation
ArctanFunction
minValue: 0.1
maxValue: 1.0
constitutiveTransformation
ArctanFunction
minValue: 0.01
maxValue: 1.0
aspecTransformation
ArctanFunction
minValue: 0.01
maxValue: 10.0
amaxTransformation
ArctanFunction
minValue: 0.1
maxValue: 10.0
rspecTransformation
ArctanFunction
minValue: 0.01
maxValue: 10.0
rmaxTransformation
ArctanFunction
minValue: 0.1
maxValue: 10.0
"""
    self.optimiserspec = """GradientOptimiser-0.1.1
initial_stepsize: 1.0
delta: 1.0e-1
stepsize_shrink: 0.5
termination_stepsize: None
termination_objective: None
termination_iteration: None
termination_numEvaluations: None
termination_improvement: None
termination_relative_improvement: 0.01
stepsize_max: 0.01
eliminateFlatComponents: False
ParameterTransformer
"""
    self.simgenexspec = """SimGenex-2.0

procedure notreat
{
  treatment: hormone = 0.000000;
}

procedure hormtreat
{
  treatment: hormone = 1.000000;
}

procedure equilibration
{
  runtimesteps: 100;
}

procedure treatmenttime
{
  runtimesteps: 50;
}

procedure wildtype
{
}

procedure ko_housekeeping
{
  knockout: housekeepinggene;
}

procedure ko_c1
{
  knockout: c1gene;
}

procedure ko_c2
{
  knockout: c2gene;
}

procedure ko_c3
{
  knockout: c3gene;
}

procedure ko_c4
{
  knockout: c4gene;
}

simexpression all
{
  foreach: wildtype ko_housekeeping ko_c1 ko_c2 ko_c3 ko_c4;
  equilibration;
  foreach: notreat hormtreat;
  treatmenttime;
}

measurementmatrix
{
  measurementprocess
  {
    offset: 0.100000;
    transformation: log2(offset(x1)) - log2(offset(x2));
  }

  measurementcolumns
  {
    wt_notreat: x1 = all_wildtype_notreat, x2 = all_wildtype_notreat;
    kohk_notreat: x1 = all_ko_housekeeping_notreat, x2 = all_wildtype_notreat;
    koc1_notreat: x1 = all_ko_c1_notreat, x2 = all_wildtype_notreat;
    koc2_notreat: x1 = all_ko_c2_notreat, x2 = all_wildtype_notreat;
    koc3_notreat: x1 = all_ko_c3_notreat, x2 = all_wildtype_notreat;
    koc4_notreat: x1 = all_ko_c4_notreat, x2 = all_wildtype_notreat;
    wt_hormtreat: x1 = all_wildtype_hormtreat, x2 = all_wildtype_hormtreat;
    kohk_hormtreat: x1 = all_ko_housekeeping_hormtreat, x2 = all_wildtype_hormtreat;
    koc1_hormtreat: x1 = all_ko_c1_hormtreat, x2 = all_wildtype_hormtreat;
    koc2_hormtreat: x1 = all_ko_c2_hormtreat, x2 = all_wildtype_hormtreat;
    koc3_hormtreat: x1 = all_ko_c3_hormtreat, x2 = all_wildtype_hormtreat;
    koc4_hormtreat: x1 = all_ko_c4_hormtreat, x2 = all_wildtype_hormtreat;
  }

  genemapping
  {
    factor housekeeper = "genehousekeeper";
    factor c1 = "genec1";
    factor c2 = "genec2";
    factor c3 = "genec3";
    factor c4 = "genec4";
  }
}

discriminationsettings
{
  distance: correlation;

  whitelistdefs
  {
    factor: housekeeper c1 c2 c3 c4;
    gene: housekeepinggene c1gene c2gene c3gene c4gene;
  }
}
"""
    self.model_01 = open('sgx.tra', 'r')
    self.model_02 = open('sgx_01.tra', 'r')
    self.rndseed = 1
    self.cwd = os.getcwd()
    self.simulated_data = None
    self.simulated_data = open('out.txt', 'r')


  def test_ExpressionData(self) :
    gene_name_list = ['f1', 'f2', 'f3']
    edata = trsysmodis.ExpressionData(gene_name_list)
    for gene_name in gene_name_list :
      self.assertTrue(gene_name in edata.get_gene_name_list())
    col1name = 'col1'
    col1dict = {}
    for gene_name in gene_name_list :
      col1dict[gene_name] = 1.0
    edata.add_column(col1name, col1dict)
    for gene_name in gene_name_list :
      self.assertEquals(edata.get_value(col1name, gene_name), 1.0)
    col2name = 'col2'
    col2dict = {}
    for gene_name in gene_name_list :
      col2dict[gene_name] = 2.0
    edata.add_column(col2name, col2dict)
    for gene_name in gene_name_list :
      self.assertEquals(edata.get_value(col2name, gene_name), 2.0)
    for gene_name in gene_name_list :
      p = edata.get_profile(gene_name)
      self.assertEquals(p['col1'], 1.0)
      self.assertEquals(p['col2'], 2.0)
    self.assertRaises(KeyError, edata.get_profile, 'fx1')


  def test_ExpressionSet(self) :
    es1 = trsysmodis.ExpressionSet(makeLinearIncreasingEdata(5, 3))
    es2 = trsysmodis.ExpressionSet(makeLinearIncreasingEdata(5, 3))
    # self.assertEquals(0.0, es1.divergence(es2, trsysmodis.distance_euclidean))
    esr4 = trsysmodis.ExpressionSet(makeLinearIncreasingEdata(4, 3))
    esr6 = trsysmodis.ExpressionSet(makeLinearIncreasingEdata(6, 3))
    self.assertRaises(StandardError, es1.divergence, esr4, trsysmodis.distance_euclidean)
    # self.assertRaises(StandardError, es1.divergence, esr6, trsysmodis.distance_euclidean)
    

  def test_SimGenexObjectiveFunctionParser(self) :
    specfile = StringIO.StringIO(self.simgenexspec)
    o = trsysmodis.SimGenexObjectiveFunctionParser(specfile)
    simgenex = o.parse_objectivespec()
#     f = open('sgxorig.txt', 'w')
#     f.write(self.simgenexspec)
#     f.close()
#     f = open('sgxparsed.txt', 'w')
#     f.write(str(simgenex))
#     f.close()
    self.assertEquals(self.simgenexspec, str(simgenex))


  def test_objectivefunctionparser(self) :
    return
    expression_set = trsysmodis.ExpressionSet()
    expression_set.read(self.simulated_data)
    specfile = StringIO.StringIO(self.simgenexspec)
    o = trsysmodis.SimGenexObjectiveFunctionParser(specfile)
    simgenex = o.parse_objectivespec()
    objective_function = trsysmodis.SimGenexObjectiveFunction(simgenex, expression_set)
    optimiser = transsys.optim.parse_optimiser(StringIO.StringIO(self.optimiserspec))
    optimiser.transformer = transsys.optim.parse_parameter_transformer(StringIO.StringIO(self.transformerspec))
    rng = random.Random(self.rndseed)
    optimiser.rng = rng
    optimiser.randomInitRange = 1.0
    transsys_program = transsys.TranssysProgramParser(self.model_01).parse()
    obj = objective_function(transsys_program)
    opt_result = optimiser.optimise(transsys_program, objective_function)
    # FIXME: was fitness < 0.3 -- any rationale for that?
    self.assertTrue(opt_result.objectiveOptimum.fitness < 0.4)


suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)
unittest.TextTestRunner(verbosity=2).run(suite)
