#!/usr/bin/env python

import StringIO
import random
import unittest
import sys
import os

import transsys
import trsysmodis


class TestSequenceFunctions(unittest.TestCase):


  def setUp(self):
    self.transformerspec = """TranssysTypedParameterTransformer
decayTransformation
ArctanFunction
minValue: 0.1
maxValue: 1.0
diffusibilityTransformation
ArctanFunction
minValue: 0.1
maxValue: 1.0
constitutiveTransformation
ArctanFunction
minValue: 0.01
maxValue: 1.0
aspecTransformation
ArctanFunction
minValue: 0.01
maxValue: 10.0
amaxTransformation
ArctanFunction
minValue: 0.1
maxValue: 10.0
rspecTransformation
ArctanFunction
minValue: 0.01
maxValue: 10.0
rmaxTransformation
ArctanFunction
minValue: 0.1
maxValue: 10.0
"""
    self.optimiserspec = """GradientOptimiser-0.1.1
initial_stepsize: 1.0
delta: 1.0e-1
stepsize_shrink: 0.5
termination_stepsize: None
termination_objective: None
termination_iteration: None
termination_numEvaluations: None
termination_improvement: None
termination_relative_improvement: 0.01
stepsize_max: 0.01
eliminateFlatComponents: False
ParameterTransformer
"""
    self.specfile = open('sgx.txt', 'r')
    self.model_01 = open('sgx.tra', 'r')
    self.model_02 = open('sgx_01.tra', 'r')
    self.rndseed = 1
    self.cwd = os.getcwd()
    self.simulated_data = None
    self.simulated_data = open('out.txt', 'r')


  def test_ExpressionData(self) :
    gene_name_list = ['f1', 'f2', 'f3']
    edata = trsysmodis.ExpressionData(gene_name_list)
    for gene_name in gene_name_list :
      self.assertTrue(gene_name in edata.get_gene_name_list())
    col1name = 'col1'
    col1dict = {}
    for gene_name in gene_name_list :
      col1dict[gene_name] = 1.0
    edata.add_column(col1name, col1dict)
    for gene_name in gene_name_list :
      self.assertEquals(edata.get_value(col1name, gene_name), 1.0)
    col2name = 'col2'
    col2dict = {}
    for gene_name in gene_name_list :
      col2dict[gene_name] = 2.0
    edata.add_column(col2name, col2dict)
    for gene_name in gene_name_list :
      self.assertEquals(edata.get_value(col2name, gene_name), 2.0)
    for gene_name in gene_name_list :
      p = edata.get_profile(gene_name)
      self.assertEquals(p['col1'], 1.0)
      self.assertEquals(p['col2'], 2.0)
    self.assertRaises(KeyError, edata.get_profile, 'fx1')


  def test_EmpiricalObjectiveFunctionParser(self) :
    self.assertRaises(TypeError, trsysmodis.SimGenexObjectiveFunctionParser(self.specfile))


  def test_objectivefunctionparser(self) :
    expression_set = trsysmodis.ExpressionSet()
    expression_set.read(self.simulated_data)
    o = trsysmodis.SimGenexObjectiveFunctionParser(self.specfile)
    simgenex = o.parse_objectivespec()
    objective_function = trsysmodis.SimGenexObjectiveFunction(simgenex, expression_set)
    optimiser = transsys.optim.parse_optimiser(StringIO.StringIO(self.optimiserspec))
    optimiser.transformer = transsys.optim.parse_parameter_transformer(StringIO.StringIO(self.transformerspec))
    rng = random.Random(self.rndseed)
    optimiser.rng = rng
    optimiser.randomInitRange = 1.0
    transsys_program = transsys.TranssysProgramParser(self.model_01).parse()
    obj = objective_function(transsys_program)
    opt_result = optimiser.optimise(transsys_program, objective_function)
    # FIXME: was fitness < 0.3 -- any rationale for that?
    self.assertTrue(opt_result.objectiveOptimum.fitness < 0.4)


suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)
unittest.TextTestRunner(verbosity=2).run(suite)
