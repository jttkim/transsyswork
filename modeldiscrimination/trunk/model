#!/usr/bin/python


import getopt
import sys
import os
import transsys
import transsys.optim 


class Objective(object) :

  def __init__(self, f ) :
    self.equilibration_length = None
    self.minutes_per_timestep = None
    self.profileScoreFunction = None
    self.f=f
    self.time_series_dict=self.readTimeSeries()
   
  def __call__(self, transsysProgram) :
    """Create a new instance."""
    #time_series_dict=self.readTimeSeries()
    timeSeries=self.timeSeries()
    d = 0.0
    factor_list = timeSeries[0].transsys_program.factor_list
    for factor_index in xrange(len(factor_list)) :
      factor = factor_list[factor_index]
      for j in xrange(len(timeSeries)) :
        x = self.time_series_dict[factor.name][j] - timeSeries[j].factor_concentration[factor_index]
        d = d + x * x
    return d

  def readTimeSeries(self) :
    time_series_dict = {}
    l = f.readline()
    l = f.readline()
    while l :
      word_list = l.strip().split()
      factor_name = word_list[0]
      expression_list = []
      for word in word_list[1:] :
        expression_list.append(float(word))
      time_series_dict[factor_name] = expression_list
      l = f.readline()
    return time_series_dict
 
  def timeSeries(self) :
    transsysInstance = transsys.TranssysInstance(transsysProgram)
    transsysInstance.factor_concentration[0]=1.0
    transsysInstance.factor_concentration[1]=0.0
    transsysInstance.factor_concentration[2]=1.0
    timeSeries = transsysInstance.time_series(3)
    return timeSeries

## Read transsys program
optlist, args = getopt.getopt(sys.argv[1:], ' ')

# Validate input
if len(args) > 0 :
  transsys_program_file = open(args[0], 'r')
else :
  raise StandardError, 'no transsys program file'
if len(args) > 1 :
  f = open(args[1], 'r')
else :
  raise StandardError, 'no expression profile file'
if len(args) > 2 :
  outfile = open(args[2], 'w') # Put 1 instead if a you want to output expression data
else :
  outfile = sys.stdout

 
# Main program

transsysProgram = transsys.TranssysProgramParser(transsys_program_file).parse()
x=Objective(f)
print 'Results are:', x(transsysProgram)
 
if outfile is not sys.stdout:
  outfile.close()
