#!/usr/bin/env python

import sys
import getopt
import transsys
import trsysmodis


def usage() :
  print 'usage:'
  print 'options:'
  print '-h: print this help and exit'


options, args = getopt.getopt(sys.argv[1:], 'h')
for opt, par in options :
  if opt == '-h' :
    usage()
    sys.exit()
  else :
    raise StandardError, 'unhandled option "%s"' % opt
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout
p = trsysmodis.EmpiricalObjectiveFunctionParser(infile)
s = p.parse_objectivespec()
sys.stderr.write('getting string\n')
outfile.write('%s\n' % str(s))
for simexpression in s.simexpression_defs :
  print str(simexpression)
  ilist = simexpression.get_instruction_list()
  print ilist
  iseq_list = simexpression.get_instruction_sequence_list()
  for iseq in iseq_list :
    print str(iseq)
    
#   for instruction in ilist :
#     if isinstance(instruction, trsysmodis.ForeachInstruction) :
#       prefix_list = [trsysmodis.InstructionSequence('test')]
#       iseq_list = instruction.make_instruction_sequence_list(prefix_list)
#       for iseq in iseq_list :
#         print str(iseq)
#       print
