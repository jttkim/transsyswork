#!/usr/bin/python

import copy
import getopt
import sys
import os
import transsys
import transsys.optim 
import random
import pdb


def get_interactions_array(tp) :
  vertices = []
  for gene in tp.gene_names() :
    index = tp.find_gene_index(gene)
    for promoter in tp.gene_list[index].promoter[1:] :
      for factor in promoter.getIdentifierNodes():
        vertices.append([gene, factor.factor.name])
  return vertices


def rewire_net(v1,v2,tp) :
  id = 0
  ind = 0
  inx = []
  v = []
  promot = []
  v.append(v1)
  v.append(v2)
  inx.append(tp.find_gene_index(v1[0]))
  inx.append(tp.find_gene_index(v2[0]))
  for i in inx :
    v1 = v[id]
    for j, promoter in enumerate(tp.gene_list[i].promoter[1:]) :
      if promoter.factor_list[0].name == v1[1] :
        promot.append(tp.gene_list[i].promoter[j+1])
	ind = j + 1
    del tp.gene_list[i].promoter[ind]
    id = id + 1
  id = 1
  for i in inx :
    tp.gene_list[i].promoter.append(promot[id])
    id = id - 1
  return tp


def search_vertice(v1, v2, intera) :
  new_v1 = [v1[0],v2[1]]
  new_v2 = [v2[0],v1[1]]
  active = 1
  if v1 != v2 :
    if (new_v1 not in intera) :
      if (new_v2 not in intera) :
        active = 0
  return active


def rw_operation() :
  sequence = []
  for i in range(0,20) :
    n = int(round(1.2**i))
    if n not in sequence:
      sequence.append(n)
  return sequence


transsys_number = None
transsys_program = None
parameters = None
model = None
replicate = None

optlist, args = getopt.getopt(sys.argv[1:], 'n:t:r:lvh')

for opt, par in optlist :
  if opt == '-h' :
    print '-n: <Transsys program number>: Transsys program number'
    print '-t: <Transsys program name>: Transsys program name'
    print '-r: <Specify random replicates>: Random replicates'
    print '-h: print this help and exit'
    sys.exit()
  if opt == '-n' :
    transsys_number = int(par)
  elif opt == '-t' :
    transsys_name = par
  elif opt == '-r' :
    replicate = int(par)
  else :
    raise StandardError, 'unhandled option "%s"' % opt

if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdout

transsys_program = transsys.TranssysProgramParser(infile).parse()
inter = get_interactions_array(transsys_program)
factor_list = transsys_program.factor_list
gene_list = transsys_program.gene_list

"""
Changing interactions
"""

optn = range(0,len(inter))
osrh = 1
srh = 0
active = 1

for i in rw_operation():
  for r in range(1,replicate+1) :
    tp1 = copy.deepcopy(transsys_program)
    inter1 = get_interactions_array(tp1)
    for j in range(1,i+1) :
      srh = 0
      while( active != 0 and osrh != 0 ) :
        inx1 = random.choice(optn)
        inx2 = random.choice(optn)
        v1 = inter1[inx1]
        v2 = inter1[inx2]
        active = search_vertice(v1, v2, inter1)
        srh = srh + 1
        if srh >= len(inter)*200 :
          osrh = 0
      if osrh == 1 :
        tp1 = rewire_net(v1,v2,tp1)
        inter1 = get_interactions_array(tp1)
        active = 1
    model = file('%s%02d%02d.tra'%(transsys_name, i, r),'w')
    model.write('%s'%tp1)

